buildscript {
    ext {
        hasJar={false}
        baseImage = "omar-base"
        dockerFile="docker/Dockerfile"
        dockerStatementsOverride = {
            [
            "FROM ${project.dockerNamespaceUrl}${project.ext.baseImage}:${project.dockerAppTag}",
            "ENV HOME=/home/omar",
            "USER root",
            "ADD run-httpd.sh \$HOME/run-httpd.sh",
            """RUN mkdir -p \$HOME && \\
    yum --disablerepo=centos* -y install hostname httpd gettext && \\
    yum -y install nss_wrapper mod_ssl && yum clean all && \\
    setcap cap_net_bind_service+ep /usr/sbin/httpd && \\
    setcap cap_net_bind_service+ep /usr/sbin/apachectl&& \\
    mkdir /etc/ssl/server-certs && \\
    mkdir /etc/httpd/crl && \\
    chmod -v +x \$HOME/run-httpd.sh && \\
    chmod 774 /usr/share/httpd && \\
    chmod 774 /var/run/httpd && \\
    chown 1001:0 /run/httpd && \\
    chown 1001:0 /var/log/httpd && \\
    chmod 774 /var/log/httpd && \\
    chmod g+s /var/run/httpd && \\
    ln -sf /proc/self/fd/1 /var/log/httpd/access_log && \\
    ln -sf /proc/self/fd/1 /var/log/httpd/error_log && \\
    ln -sf /proc/self/fd/1 /var/log/httpd/ssl_access_log && \\
    ln -sf /proc/self/fd/1 /var/log/httpd/ssl_request_log && \\
    ln -sf /proc/self/fd/1 /var/log/httpd/ssl_error_log && \\
    find /usr/share/httpd -type d -exec chmod g+xws {} \\; && \\
    find /usr/share/httpd -type f -exec chmod g+rw {} \\; && \\
    find /etc/httpd -type d -exec chmod g+rw {} \\; && \\
    find /etc/pki -type d -exec chmod g+xws {} \\; && \\
    find /etc/pki -type f -exec chmod g+rw {} \\; && \\
    chown -R 1001:0 /usr/share/httpd && \\
    chown -R 1001:0 /etc/httpd && \\
    chown -R 1001:0 /etc/pki && \\
    chown -R 1001:0 /etc/ssl&& \\
    find \$HOME -type d -exec chmod g+xws {} \\; && \\
    find \$HOME -type f -exec chmod g+rw {} \\; && \\
    chown -R 1001:0 \$HOME && \\
    chmod 777 \$HOME/*.sh && \\
    chmod 777 \$HOME && \\
    chown -R 1001:0 \$HOME""",
            "EXPOSE 80 443",
            "WORKDIR \$HOME",
            "USER 1001",
            "CMD ./run-httpd.sh"
            ]
        }

    }
    repositories {
        mavenLocal()
        maven { url ossimMavenProxy }
    }
    dependencies {
        classpath 'io.ossim:gradleDefaults:1.7-SNAPSHOT'
    }
}

io.ossim.gradleDefaults.Variables.setAdditionalVariables(project)
io.ossim.gradleDefaults.Variables.setVersionVariables(project)
dockerBuildDir="${rootProject.projectDir}/docker"
version "${buildVersion}-${buildVersionTag}"
jarDestination = "${projectDir}/build/libs/${project.name}-${version}.jar"
io.ossim.gradleDefaults.Docker.addDockerTasks(project, dockerRegistryUrl, dockerRegistryUsername, dockerRegistryPassword, name, dockerImageTag, dockerBuildDir, jarDestination, ["BASE_IMAGE": "${dockerRegistryUrl}/${dockerBaseImage}:${dockerFromTag}"])
io.ossim.gradleDefaults.Publications.addPublication(project, groupName, project.name, "${buildVersion}-${buildVersionTag}")
io.ossim.gradleDefaults.Publications.addRepository(project, mavenPublishUrl, mavenRepoUsername, mavenRepoPassword)
io.ossim.gradleDefaults.Openshift.addOpenshiftTasks(project, openshiftUrl, openshiftUsername, openshiftPassword, openshiftProjectName, openshiftServiceName,  dockerRegistryUrl, name, dockerImageTag)

plugins {
  id "com.github.ben-manes.versions" version "0.17.0"
  id "org.sonarqube" version "2.6.2"
}

apply plugin: 'groovy'
apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "maven"

group "io.ossim.omar.apps"

repositories {
    mavenLocal()
    maven { url ossimMavenProxy }
}

dependencies {
    compile 'io.ossim.omar.plugins:omar-core-plugin:+'
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    compile 'org.postgresql:postgresql:9.4-1205-jdbc42'
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
