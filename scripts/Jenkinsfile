//==================================================================================================
// This is the Jenkins pipeline script for building the OMAR Web Proxy application.
// Environment variables that MUST be passed in by Jenkins:
//    OSSIM_GIT_BRANCH: The tag of the branch to be built. Typically dev or master.
//
// Environment varaibles that MUST be set in the Jenkins global environment (manage jenkins -> configure system -> environment varaibles)
//    ARTIFACTORY_USER: The user to use when pushing artifacts
//    ARTIFACTORY_PASSWORD: The password to use when pushing artifacts
//    OPENSHIFT_USERNAME: The user to use logging into the docker registry
//    OPENSHIFT_PASSWORD: The password to use logging into the docker registry
//==================================================================================================

// TODO: get to run on any node
def notifyObj
node(""){
    def workspaceDir = pwd()
    def appName = "omar-web-proxy"
    def omarCommonProjName = "omar-common"
    env.OMAR_COMMON_PROPERTIES="${workspaceDir}/${omarCommonProjName}/omar-common-properties.gradle"

    stage("Checkout"){
        dir("omar-web-proxy") {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/omar-web-proxy.git"
        }
        dir(omarCommonProjName) {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/${omarCommonProjName}.git"
        }
    }

    stage("Download Artifacts"){
       step ([$class: "CopyArtifact",
             projectName: "ossim-ci-${OSSIM_GIT_BRANCH}",
             filter: "ossim-ci-${OSSIM_GIT_BRANCH}.tgz",
             flatten: true])
       sh "tar xvfz ossim-ci-${OSSIM_GIT_BRANCH}.tgz"
       notifyObj = load "${env.WORKSPACE}/ossim-ci/jenkins/pipeline/notify.groovy"
    }

    try {
      stage ("Publish Docker App")
      {
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
                        credentialsId: 'dockerCredentials',
                        usernameVariable: 'OPENSHIFT_USERNAME',
                        passwordVariable: 'OPENSHIFT_PASSWORD']])
        {
            // Run all tasks on the app. This includes pushing to OpenShift and S3.
            sh """
            pushd ${workspaceDir}/omar-web-proxy/apps/${appName}-app
            gradle ${GRADLE_TASK}
            popd
            """
        }
      }
    }
    catch(e){
        echo e.toString()
        currentBuild.result = "FAILED"
        notifyObj?.notifyFailed()
    }
  stage("Clean Workspace"){
     step([$class: 'WsCleanup'])
  }
}
